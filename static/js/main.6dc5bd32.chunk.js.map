{"version":3,"sources":["n2-features/f1-auth/a5-profile/p1-ui/anonim.jpg","n2-features/f1-auth/a1-login/l2-bll/loginActions.ts","n2-features/f1-auth/a1-login/l2-bll/loginInitialState.ts","n2-features/f1-auth/a2-register/p2-bll/registerInitialState.ts","n1-main/m2-bll/b1-main/mainInitialState.ts","n1-main/m2-bll/b1-main/mainActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileInitialState.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreInitialState.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassInitialState.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a1-login/l2-bll/loginReducer.ts","n2-features/f1-auth/a2-register/p2-bll/registerReducer.ts","n2-features/f1-auth/a2-register/p2-bll/registerActions.ts","n1-main/m2-bll/b1-main/mainReducer.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileReducer.ts","n1-main/m3-dal/instance.ts","n2-features/f1-auth/a2-register/p3-dal/RegisterAPI.ts","n0-common/c1-ui/status/Status.tsx","n2-features/f1-auth/a2-register/p1-ui/Register.tsx","n2-features/f1-auth/a2-register/p2-bll/registerThunk.ts","n2-features/f1-auth/a1-login/l1-ui/Login.tsx","n2-features/f1-auth/a1-login/l3-dal/LoginAPI.ts","n2-features/f1-auth/a1-login/l1-ui/LoginContainer.tsx","n2-features/f1-auth/a1-login/l2-bll/loginThunk.ts","n2-features/f1-auth/a5-profile/p1-ui/Profile.tsx","n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer.tsx","n2-features/f1-auth/a3-restore/r1-ui/Restore.tsx","n2-features/f1-auth/a3-restore/r3-dal/RestoreAPI.ts","n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer.tsx","n2-features/f1-auth/a3-restore/r2-bll/restoreThunk.ts","n2-features/f1-auth/a4-setPass/s3-dal/SetPassAPI.ts","n2-features/f1-auth/a4-setPass/s1-ui/SetPass.tsx","n2-features/f1-auth/a4-setPass/s2-bll/setPassThunk.ts","n1-main/m1-ui/main/routes/Routes.tsx","n1-main/m1-ui/main/dev-header/DevHeader.tsx","n1-main/m1-ui/main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","loginIn","value","type","loginInitialState","isLoginIn","registerInitialState","isRegisterIn","mainInitialState","status","error","setStatus","setError","SET_USER","profileInitialState","user","restoreInitialState","setPassInitialState","isSetPassIn","RootReducer","combineReducers","login","state","action","register","main","restore","setPass","profile","store","createStore","applyMiddleware","thunkMiddleware","window","axiosInstance","axios","create","baseURL","withCredentials","RegisterAPI","data","post","Status","React","memo","props","title","style","color","Register","useSelector","dispatch","useDispatch","useState","email","setEmail","password","setPassword","firstVisited","setFirstVisited","useEffect","to","PATH","LOGIN","width","outline","margin","display","flexDirection","justifyContent","alignItems","placeholder","onChange","e","currentTarget","onClick","a","response","message","Login","checked","setChecked","onLogin","name","RESTORE","REGISTER","LoginAPI","delete","LoginContainer","remember","setRemember","flag","setFlag","redirect","setRedirect","useCallback","rememberMe","res","setTimeout","PROFILE","Profile","src","avatar","anonym","alt","height","logOut","ProfileContainer","Restore","onRestore","RestoreAPI","RestoreContainer","from","SetPassAPI","SetPass","passwordConfirm","setPasswordConfirm","token","useParams","resetPasswordToken","SET_PASS","Routes","exact","path","render","DevHeader","padding","Main","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6dc5bd32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anonim.b1d7bfb1.jpg\";","export const LOGIN_IN = 'LOGIN/LOGIN_IN'; // blank\r\nexport const SET_LOGIN_ERROR = 'LOGIN/SET_ERROR'; // blank\r\n\r\ntype loginInACType = ReturnType<typeof loginIn>;\r\n\r\nexport type loginReducerActions = loginInACType ;\r\n\r\nexport const loginIn = (value:boolean) => {\r\n    return {\r\n        type: LOGIN_IN,\r\n        value\r\n    } as const\r\n}\r\n","export type LoginInitialStateType = typeof loginInitialState;\r\n\r\nexport const loginInitialState = {\r\n    isLoginIn: false,\r\n};\r\n","export type RegisterInitialStateType = {\r\n isRegisterIn:boolean\r\n}\r\n\r\nexport const registerInitialState: RegisterInitialStateType = {\r\n    isRegisterIn:false\r\n\r\n};","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type MainInitialStateType = typeof mainInitialState;\r\n\r\nexport const mainInitialState = {\r\n    status:'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n};\r\n","import {RequestStatusType} from \"./mainInitialState\";\r\n\r\n// export const LOGIN_LOADING = 'LOGIN/LOADING';\r\n// export const LOGIN_ERROR = 'LOGIN/ERROR';\r\n// export const LOGIN_SUCCESS = 'LOGIN/SUCCESS';\r\n\r\n\r\nexport const SET_STATUS = 'MAIN/SET_STATUS';\r\nexport const SET_ERROR = 'MAIN/SET_ERROR';\r\n\r\ntype SetStatusACType = ReturnType<typeof setStatus>;\r\ntype setErrorACType = ReturnType<typeof setError>;\r\n\r\nexport type mainReducerActions = SetStatusACType | setErrorACType;\r\n\r\nexport const setStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const setError = (error: null | string) => {\r\n    return {\r\n        type: SET_ERROR,\r\n        error\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport const SET_USER = 'PROFILE/SET_USER'; // blank\r\n\r\ntype profileInACType = ReturnType<typeof setUser>;\r\n\r\nexport type profileReducerActions = profileInACType;\r\n\r\nexport const setUser = (user: ResponseDataType) => {\r\n    return {\r\n        type: SET_USER,\r\n        user\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type ProfileInitialStateType = typeof  profileInitialState;\r\n\r\nexport const profileInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type RestoreInitialStateType = typeof  restoreInitialState;\r\n\r\nexport const restoreInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","\r\n\r\nexport type SetPassInitialStateType = typeof  setPassInitialState;\r\n\r\nexport const setPassInitialState = {\r\n    isSetPassIn:false\r\n};\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"../../n2-features/f1-auth/a1-login/l2-bll/loginReducer\";\r\nimport {registerReducer} from \"../../n2-features/f1-auth/a2-register/p2-bll/registerReducer\";\r\nimport {mainReducer} from \"./b1-main/mainReducer\";\r\nimport {profileReducer} from \"../../n2-features/f1-auth/a5-profile/p2-bll/profileReducer\";\r\nimport {restoreReducer} from \"../../n2-features/f1-auth/a3-restore/r2-bll/restoreReducer\";\r\nimport {setPassReducer} from \"../../n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    main: mainReducer,\r\n    restore: restoreReducer,\r\n    setPass :setPassReducer,\r\n    profile: profileReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>;\r\n\r\nexport const store = createStore(RootReducer, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {LOGIN_IN, loginReducerActions, SET_LOGIN_ERROR} from \"./loginActions\";\r\nimport {loginInitialState, LoginInitialStateType} from \"./loginInitialState\";\r\n\r\nexport const loginReducer = (state:LoginInitialStateType = loginInitialState, action: loginReducerActions) => {\r\n    switch (action.type) {\r\n        case LOGIN_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isLoginIn: action.value\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {registerInitialState} from \"./registerInitialState\";\r\nimport {REGISTER_IN, registerReducerActions} from \"./registerActions\";\r\n\r\n\r\n\r\nexport const registerReducer = (state = registerInitialState, action: registerReducerActions) => {\r\n    switch (action.type) {\r\n        case REGISTER_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isRegisterIn:true\r\n\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","\r\n\r\nexport const REGISTER_IN = 'REGISTER/REGISTER_IN'; // blank\r\n\r\ntype registerACType = ReturnType<typeof registerIn>;\r\n\r\nexport type registerReducerActions = registerACType;\r\n\r\nexport const registerIn = () => {\r\n    return {\r\n        type:REGISTER_IN,\r\n\r\n    } as const\r\n}","import {mainInitialState, MainInitialStateType} from \"./mainInitialState\";\r\nimport {mainReducerActions, SET_ERROR, SET_STATUS} from \"./mainActions\";\r\n\r\nexport const mainReducer = (state: MainInitialStateType = mainInitialState, action: mainReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {RestoreReducerActions} from \"./restoreActions\";\r\nimport {restoreInitialState, RestoreInitialStateType} from \"./restoreInitialState\";\r\n\r\nexport const restoreReducer = (state: RestoreInitialStateType = restoreInitialState, action: RestoreReducerActions):RestoreInitialStateType => {\r\n    switch (4) {\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {SET_PASS_IN, setPassReducerActions} from \"./setPassActions\";\r\nimport {setPassInitialState, SetPassInitialStateType} from \"./setPassInitialState\";\r\n\r\nexport const setPassReducer = (state: SetPassInitialStateType = setPassInitialState, action: setPassReducerActions): SetPassInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PASS_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isSetPassIn: true\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","\r\n\r\nexport const SET_PASS_IN = 'SET_PASS/SET_PASS_IN'; // blank\r\n\r\ntype setPassACType = ReturnType<typeof setPassIn>;\r\n\r\nexport type setPassReducerActions = setPassACType;\r\n\r\nexport const setPassIn = () => {\r\n    return {\r\n        type: SET_PASS_IN,\r\n    } as const\r\n}\r\n\r\n","import {profileReducerActions, SET_USER} from \"./profileActions\";\r\nimport {profileInitialState, ProfileInitialStateType} from \"./profileInitialState\";\r\n\r\nexport const profileReducer = (state: ProfileInitialStateType = profileInitialState, action: profileReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_USER: { // blank\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import  axios from 'axios';\r\n\r\n export const axiosInstance = axios.create({\r\n    baseURL:\r\n       // \"http://localhost:7542/2.0/\" //local\r\n     'https://neko-back.herokuapp.com/2.0'\r\n     ,\r\n     withCredentials:true\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RegisterDataType={\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport type ResponseRegisterDataType={\r\n    error:string\r\n}\r\n\r\n\r\nexport const RegisterAPI ={\r\n    register(data:RegisterDataType){\r\n        return axiosInstance.post<ResponseRegisterDataType>('auth/register',data)\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\n\r\ntype StatusBlockPropsType = {\r\n    title: string;\r\n    status: RequestStatusType;\r\n    error: null | string;\r\n}\r\n\r\nexport const Status: React.FC<StatusBlockPropsType> = React.memo((props) => {\r\n    const {title, status, error} = props;\r\n    return (\r\n        <div>\r\n            <h2>{title}</h2>\r\n            {status === 'failed' ? <div style={{color:'red'}}>{error}</div> :\r\n                status === 'succeeded' ? <div style={{color:'green'}}>success</div> : null}\r\n        </div>\r\n    );\r\n});","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {registerTC} from \"../p2-bll/registerThunk\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype RegisterPropsType={}\r\n\r\nexport const Register: React.FC<RegisterPropsType>= React.memo((props) => {\r\n\r\n    const isRegisterIn = useSelector<AppRootStateType, boolean>(state => state.register.isRegisterIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState<string>('gerasimenkodenis7@gmail.com');\r\n    const [password, setPassword] = useState<string>('qwertyu12');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited,setFirstVisited]);\r\n\r\n    const onRegister=()=>{\r\n        dispatch(registerTC({email,password}))\r\n    }\r\n\r\n    if (isRegisterIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n            }\r\n            return (\r\n            <div style={{\r\n                width: '40%',\r\n                outline: '1px solid red',\r\n                margin: '0 auto',\r\n                display: 'flex',\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: 'center'\r\n            }}>\r\n                <Status title={'Register'} status={status} error={error}/>\r\n\r\n                <div>\r\n                    <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                           onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" placeholder={'enter you password'} value={password}\r\n                           onChange={(e) => setPassword(e.currentTarget.value)}/>\r\n                </div>\r\n                <button onClick={onRegister}>sign up</button>\r\n            </div>\r\n            );\r\n            });\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RegisterAPI, RegisterDataType} from \"../p3-dal/RegisterAPI\";\r\nimport {registerIn} from \"./registerActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\n\r\nexport const registerTC = (data: RegisterDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await RegisterAPI.register(data);\r\n            dispatch(registerIn());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\n\r\ntype LoginPropsType = {\r\n    email: string;\r\n    setEmail: (value: string) => void;\r\n    password: string;\r\n    setPassword: (value: string) => void;\r\n    checked: boolean;\r\n    setChecked: (value: boolean) => void;\r\n    onLogin:() => void;\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const {email, password, checked, setEmail, setPassword, setChecked, onLogin} = props;\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                       onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={password}\r\n                       onChange={(e) => setPassword(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Remember Me\r\n                    <input type=\"checkbox\" name=\"check\" checked={checked}\r\n                           onChange={(e) => setChecked(e.currentTarget.checked)}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <NavLink to={PATH.RESTORE}>Востановить пароль?</NavLink>\r\n            </div>\r\n            <button onClick={onLogin}>Sign in</button>\r\n            <div>\r\n                <NavLink to={PATH.REGISTER}>Регистрация</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type LoginDataType = {\r\n    email:string;\r\n    password:string;\r\n    rememberMe:boolean\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport type RespLogOutType = {\r\n    info:string;\r\n    error?:string;\r\n}\r\n\r\nexport const LoginAPI ={\r\n    login(data:LoginDataType){\r\n        return axiosInstance.post<ResponseDataType>('auth/login', data);\r\n    },\r\n    logOut(){\r\n        return axiosInstance.delete<RespLogOutType>('auth/me');\r\n    },\r\n\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Login} from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../l2-bll/loginThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\nexport const LoginContainer: React.FC<LoginContainerPropsType> = React.memo(() => {\r\n\r\n\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState<string>('grok88@tut.by');\r\n    const [password, setPassword] = useState<string>('alexgor88');\r\n    const [remember, setRemember] = useState<boolean>(false);\r\n    const [flag, setFlag] = useState<boolean>(false);\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        } else {\r\n            setRedirect(true);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onLogin = useCallback(() => {\r\n        dispatch(loginTC({email, password, rememberMe: remember}));\r\n    }, [email, password, remember]);\r\n\r\n\r\n    if (isLoginIn && redirect && (status === 'succeeded')) {\r\n        setTimeout(() => {\r\n            setFlag(true);\r\n        }, 2000);\r\n    }\r\n\r\n    if (flag) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Login'} status={status} error={error}/>\r\n            <Login email={email} setEmail={setEmail} password={password} setPassword={setPassword} checked={remember}\r\n                   setChecked={setRemember} onLogin={onLogin}/>\r\n        </div>\r\n    );\r\n});","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {LoginAPI, LoginDataType} from \"../l3-dal/LoginAPI\";\r\nimport {loginIn} from \"./loginActions\";\r\nimport {setUser} from \"../../a5-profile/p2-bll/profileActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const loginTC = (data: LoginDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.login(data);\r\n            dispatch(setUser(res.data));\r\n            dispatch(loginIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const logOutTC = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.logOut()\r\n            dispatch(loginIn(false));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport anonym from './anonim.jpg'\r\n\r\ntype ProfilePropsType = {\r\n    user: ResponseDataType | null;\r\n    isLoginIn: boolean;\r\n    logOut :() => void;\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo((props) => {\r\n    return <div>\r\n        {\r\n            props.isLoginIn ? <div>\r\n                <div>\r\n                    <img src={props.user?.avatar ? props.user?.avatar : anonym} alt=\"user-avatar\"\r\n                         style={{width: '300px', height: 'auto'}}/>\r\n                </div>\r\n                <div>\r\n                    <p>name:{props.user?.name}</p>\r\n                    <p>email:{props.user?.email}</p>\r\n                </div>\r\n                <button onClick={props.logOut}>LogOut</button>\r\n            </div> : <div> You are not authorized </div>\r\n        }\r\n    </div>\r\n});","import React, {useCallback, useState} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {logOutTC} from \"../../a1-login/l2-bll/loginThunk\";\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nexport const ProfileContainer: React.FC<ProfileContainerPropsType> = React.memo(() => {\r\n\r\n        const user = useSelector<AppRootStateType, ResponseDataType | null>(state => state.profile.user);\r\n        const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n        const [flag, setFlag] = useState<boolean>(false);\r\n        const dispatch = useDispatch();\r\n\r\n        const logOut = useCallback(() => {\r\n            dispatch(logOutTC());\r\n        }, []);\r\n\r\n        if (!isLoginIn) {\r\n            setTimeout(() => {\r\n                setFlag(true);\r\n            }, 2000)\r\n        }\r\n\r\n        if (flag) {\r\n            return <Redirect to={PATH.LOGIN}/>\r\n        }\r\n\r\n        return (\r\n            <Profile user={user} isLoginIn={isLoginIn} logOut={logOut}/>\r\n        );\r\n    }\r\n);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\n\r\ntype RestorePropsType = {\r\n    email: string;\r\n    setEmail: (value: string) => void;\r\n    onRestore: () => void;\r\n    status: RequestStatusType\r\n}\r\n\r\nexport const Restore: React.FC<RestorePropsType> = React.memo((props) => {\r\n    const {email, setEmail, onRestore, status} = props;\r\n    return (\r\n        <div>\r\n            {status === 'succeeded' ? <div>\r\n                На почту пришло письмо...\r\n            </div> : ''}\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                       onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n            </div>\r\n            <button onClick={onRestore}>Востановить пароль</button>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RestoreDataType = {\r\n    email: string;\r\n    from?: string;\r\n    message?: string;\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const RestoreAPI = {\r\n    restorePass(data: RestoreDataType) {\r\n        return axiosInstance.post('auth/forgot', data);\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Restore} from \"./Restore\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RestorePassTC} from \"../r2-bll/restoreThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype RestoreContainerPropsType = {}\r\n\r\nexport const RestoreContainer: React.FC<RestoreContainerPropsType> = React.memo((props) => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState<string>('grok88@tut.by');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onRestore = useCallback(() => {\r\n        //thunk\r\n        const from = \"test-front-admin <ai73a@yandex.by>\";\r\n        const message = `<div style=\"background-color: lime; padding: 15px\">\t\t\r\n\t<a href='http://localhost:3000/cards_project#/set-new-password/$token$'>\t\r\n\tlink</a></div>`\r\n\r\n        dispatch(RestorePassTC({email, from, message}));\r\n    }, [email]);\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Restore'} status={status} error={error}/>\r\n            <Restore email={email} setEmail={setEmail} onRestore={onRestore} status={status}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RestoreAPI, RestoreDataType} from \"../r3-dal/RestoreAPI\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const RestorePassTC = (data: RestoreDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus('loading'));\r\n        try {\r\n            const resp = await RestoreAPI.restorePass(data);\r\n            dispatch(setStatus('succeeded'));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type SetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    error: string\r\n}\r\n\r\nexport const SetPassAPI = {\r\n    setPass(data: SetPassDataType) {\r\n        return axiosInstance.post('auth/set-new-password', data);\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {registerTC} from \"../../a2-register/p2-bll/registerThunk\";\r\nimport {setPassTC} from \"../s2-bll/setPassThunk\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype SetPassPropsType = {}\r\n\r\nexport const SetPass: React.FC<SetPassPropsType> = React.memo((props) => {\r\n    const isSetPassIn = useSelector<AppRootStateType, boolean>(state => state.setPass.isSetPassIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited,setFirstVisited]);\r\n\r\n    const {token} = useParams();\r\n\r\n    const onSetPass = () => {\r\n        if (password !== passwordConfirm) {\r\n            dispatch(setStatus('failed'));\r\n            dispatch(setError('passwords are not equal'));\r\n        } else {\r\n            dispatch(setPassTC({password, resetPasswordToken: token}))\r\n        }\r\n\r\n    }\r\n    if (isSetPassIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'SetPassword'} status={status} error={error}/>\r\n\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={password}\r\n                       onChange={(e) => setPassword(e.currentTarget.value)}/></div>\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={passwordConfirm}\r\n                       onChange={(e) => setPasswordConfirm(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n            <button onClick={onSetPass}>set pass</button>\r\n        </div>\r\n    );\r\n})","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\n\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\nimport {SetPassAPI, SetPassDataType} from \"../s3-dal/SetPassAPI\";\r\nimport {setPassIn} from \"./setPassActions\";\r\n\r\n\r\nexport const setPassTC = (data: SetPassDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await SetPassAPI.setPass(data);\r\n            dispatch(setPassIn());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Register} from \"../../../../n2-features/f1-auth/a2-register/p1-ui/Register\";\r\nimport {LoginContainer} from \"../../../../n2-features/f1-auth/a1-login/l1-ui/LoginContainer\";\r\nimport {ProfileContainer} from \"../../../../n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer\";\r\nimport {RestoreContainer} from \"../../../../n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer\";\r\nimport {SetPass} from \"../../../../n2-features/f1-auth/a4-setPass/s1-ui/SetPass\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    RESTORE: '/restore',\r\n    SET_PASS: '/set-new-password/:token',\r\n    PROFILE: '/profile'\r\n}\r\nexport const Routes = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path={'/'} render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n            <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n            <Route path={PATH.RESTORE} render={() => <RestoreContainer/>}/>\r\n            <Route path={PATH.SET_PASS} render={() => <SetPass/>}/>\r\n            <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\n\r\nexport const DevHeader = () => {\r\n    return (\r\n        <div>\r\n            <NavLink to={PATH.LOGIN} style={{padding: '10px'}}>login </NavLink>\r\n            <NavLink to={PATH.REGISTER} style={{padding: '10px'}}>register</NavLink>\r\n            <NavLink to={PATH.RESTORE} style={{padding: '10px'}}>restore</NavLink>\r\n            <NavLink to={PATH.SET_PASS} style={{padding: '10px'}}>set new pass</NavLink>\r\n            <NavLink to={PATH.PROFILE} style={{padding: '10px'}}>profile</NavLink>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport styles from './Main.module.css';\r\nimport {Routes} from './routes/Routes';\r\nimport {DevHeader} from \"./dev-header/DevHeader\";\r\n\r\nexport const Main = () => {\r\n    return <div>\r\n        <DevHeader/>\r\n        <Routes/>\r\n    </div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from '../m2-bll/store';\r\nimport {Main} from \"./main/Main\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <Main/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}