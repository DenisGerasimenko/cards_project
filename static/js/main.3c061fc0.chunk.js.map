{"version":3,"sources":["n2-features/f1-auth/a5-profile/p1-ui/anonim.jpg","n0-common/c1-ui/preloader/svg-loaders/three-dots.svg","n2-features/f1-auth/a1-login/l2-bll/loginActions.ts","n2-features/f1-auth/a1-login/l2-bll/loginInitialState.ts","n2-features/f1-auth/a2-register/p2-bll/registerInitialState.ts","n1-main/m2-bll/b1-main/mainInitialState.ts","n1-main/m2-bll/b1-main/mainActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileInitialState.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreInitialState.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassInitialState.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsInitialState.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsActions.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsActions.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsInitialState.ts","n0-common/c1-ui/pagination/p2_bll/paginationInitialState.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelInitialState.ts","n0-common/c1-ui/sort/s2-bll/SortActions.ts","n0-common/c1-ui/sort/s2-bll/SortInitialState.ts","n1-main/m2-bll/store.ts","n2-features/f1-auth/a1-login/l2-bll/loginReducer.ts","n2-features/f1-auth/a2-register/p2-bll/registerReducer.ts","n2-features/f1-auth/a2-register/p2-bll/registerActions.ts","n1-main/m2-bll/b1-main/mainReducer.ts","n2-features/f1-auth/a3-restore/r2-bll/restoreReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer.ts","n2-features/f1-auth/a4-setPass/s2-bll/setPassActions.ts","n2-features/f1-auth/a5-profile/p2-bll/profileReducer.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsReducer.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsReducer.ts","n0-common/c1-ui/pagination/p2_bll/paginationReducer.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelReducer.ts","n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelActions.ts","n0-common/c1-ui/sort/s2-bll/SortReducer.ts","n1-main/m3-dal/instance.ts","n2-features/f1-auth/a2-register/p3-dal/RegisterAPI.ts","n0-common/c1-ui/status/Status.tsx","n2-features/f1-auth/a2-register/p1-ui/Register.tsx","n2-features/f1-auth/a2-register/p2-bll/registerThunk.ts","n2-features/f1-auth/a1-login/l1-ui/Login.tsx","n2-features/f1-auth/a1-login/l3-dal/LoginAPI.ts","n2-features/f1-auth/a1-login/l1-ui/LoginContainer.tsx","n2-features/f1-auth/a1-login/l2-bll/loginThunk.ts","n2-features/f1-auth/a5-profile/p1-ui/Profile.tsx","n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer.tsx","n2-features/f1-auth/a3-restore/r1-ui/Restore.tsx","n2-features/f1-auth/a3-restore/r3-dal/RestoreAPI.ts","n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer.tsx","n2-features/f1-auth/a3-restore/r2-bll/restoreThunk.ts","n2-features/f1-auth/a4-setPass/s3-dal/SetPassAPI.ts","n2-features/f1-auth/a4-setPass/s1-ui/SetPass.tsx","n2-features/f1-auth/a4-setPass/s2-bll/setPassThunk.ts","n2-features/f2-packs_cards/p1-packs/p3-dal/PacksAPI.ts","n2-features/f2-packs_cards/p1-packs/p2-bll/packsThunk.ts","n0-common/c1-ui/pagination/p2_bll/paginationActions.ts","n2-features/f2-packs_cards/p3-search-panel/s1-ui/SearchPanel.tsx","n0-common/c1-ui/sort/s1-ui/Sort.tsx","n2-features/f2-packs_cards/p1-packs/p1-ui/Packs.tsx","n0-common/c1-ui/preloader/Preloader.tsx","n2-features/f2-packs_cards/p2-cards/c3-dall/CardsAPI.ts","n2-features/f2-packs_cards/p2-cards/c2-bll/cardsThunk.ts","n2-features/f2-packs_cards/p2-cards/c1-ui/Cards.tsx","n1-main/m1-ui/main/routes/Routes.tsx","n1-main/m1-ui/main/dev-header/DevHeader.tsx","n1-main/m1-ui/main/Main.tsx","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","loginIn","value","type","loginInitialState","isLoginIn","registerInitialState","isRegisterIn","mainInitialState","status","error","setStatus","setError","SET_USER","setUser","user","profileInitialState","restoreInitialState","setPassInitialState","isSetPassIn","packsInitialState","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","getPacks","packs","getCards","cards","cardsInitialState","cardsTotalCount","maxGrade","minGrade","paginationInitialState","currentPage","pageSize","searchPanelInitialState","searchValue","SORT","sortByField","sort","sortInitialState","RootReducer","combineReducers","login","state","action","register","main","restore","setPass","profile","pagination","search","store","createStore","applyMiddleware","thunkMiddleware","window","axiosInstance","axios","create","baseURL","withCredentials","RegisterAPI","data","post","Status","React","memo","props","title","style","color","Register","useSelector","dispatch","useDispatch","useState","email","setEmail","password","setPassword","firstVisited","setFirstVisited","useEffect","to","PATH","LOGIN","width","outline","margin","display","flexDirection","justifyContent","alignItems","placeholder","onChange","e","currentTarget","onClick","a","response","message","Login","checked","setChecked","onLogin","name","RESTORE","REGISTER","LoginAPI","delete","LoginContainer","remember","setRemember","flag","setFlag","redirect","setRedirect","useCallback","rememberMe","res","setTimeout","PROFILE","Profile","src","avatar","anonym","alt","height","logOut","ProfileContainer","handleAuth","Restore","onRestore","RestoreAPI","RestoreContainer","from","SetPassAPI","SetPass","passwordConfirm","setPasswordConfirm","token","useParams","resetPasswordToken","PacksAPI","min","max","get","packId","put","packTC","console","log","setCurrentPage","setPageSize","SearchPanel","setValue","range","tooltipVisible","step","defaultValue","val1","setMinCardsCount","onAfterChange","val2","setMaxCardsCount","setSearchInputValue","Sort","CaretUpOutlined","onSortUp","CaretDownOutlined","onSortDown","Packs","onDeletePack","deletePackTC","onUpdatePack","cardsPack","_id","columns","dataIndex","render","pack","dataSource","rowKey","current","defaultCurrent","defaultPageSize","total","onShowSizeChange","Preloader","textAlign","preloader","CardsAPI","cardsPackId","answer","cardId","getCardTC","Cards","id","onDeleteCard","deleteCardTC","onAddCard","card","cardsPack_id","onUpdateCard","SET_PASS","PACKS","CARDS","Routes","exact","path","DevHeader","padding","Main","App","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3c061fc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anonim.b1d7bfb1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/three-dots.11861a1b.svg\";","export const LOGIN_IN = 'LOGIN/LOGIN_IN'; // blank\r\nexport const SET_LOGIN_ERROR = 'LOGIN/SET_ERROR'; // blank\r\n\r\ntype loginInACType = ReturnType<typeof loginIn>;\r\n\r\nexport type loginReducerActions = loginInACType ;\r\n\r\nexport const loginIn = (value:boolean) => {\r\n    return {\r\n        type: LOGIN_IN,\r\n        value\r\n    } as const\r\n}\r\n","export type LoginInitialStateType = typeof loginInitialState;\r\n\r\nexport const loginInitialState = {\r\n    isLoginIn: false,\r\n};\r\n","export type RegisterInitialStateType = {\r\n isRegisterIn:boolean\r\n}\r\n\r\nexport const registerInitialState: RegisterInitialStateType = {\r\n    isRegisterIn:false\r\n\r\n};","\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nexport type MainInitialStateType = typeof mainInitialState;\r\n\r\nexport const mainInitialState = {\r\n    status:'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n};\r\n","import {RequestStatusType} from \"./mainInitialState\";\r\n\r\n// export const LOGIN_LOADING = 'LOGIN/LOADING';\r\n// export const LOGIN_ERROR = 'LOGIN/ERROR';\r\n// export const LOGIN_SUCCESS = 'LOGIN/SUCCESS';\r\n\r\n\r\nexport const SET_STATUS = 'MAIN/SET_STATUS';\r\nexport const SET_ERROR = 'MAIN/SET_ERROR';\r\n\r\ntype SetStatusACType = ReturnType<typeof setStatus>;\r\ntype setErrorACType = ReturnType<typeof setError>;\r\n\r\nexport type mainReducerActions = SetStatusACType | setErrorACType;\r\n\r\nexport const setStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const setError = (error: null | string) => {\r\n    return {\r\n        type: SET_ERROR,\r\n        error\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport const SET_USER = 'PROFILE/SET_USER'; // blank\r\n\r\ntype profileInACType = ReturnType<typeof setUser>;\r\n\r\nexport type profileReducerActions = profileInACType;\r\n\r\nexport const setUser = (user: ResponseDataType) => {\r\n    return {\r\n        type: SET_USER,\r\n        user\r\n    } as const\r\n}\r\n\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type ProfileInitialStateType = typeof  profileInitialState;\r\n\r\nexport const profileInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","import {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\n\r\nexport type RestoreInitialStateType = typeof  restoreInitialState;\r\n\r\nexport const restoreInitialState = {\r\n    user: null as ResponseDataType | null\r\n};\r\n","\r\n\r\nexport type SetPassInitialStateType = typeof  setPassInitialState;\r\n\r\nexport const setPassInitialState = {\r\n    isSetPassIn:false\r\n};\r\n","export type PacksType = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type PacksInitialStateType ={\r\n    cardPacks:Array<PacksType>;\r\n    cardPacksTotalCount:null | number,\r\n    maxCardsCount: number,\r\n    minCardsCount: number,\r\n    page:null | number,\r\n    pageCount:null | number\r\n}\r\nexport const packsInitialState: PacksInitialStateType = {\r\n    cardPacks:[],\r\n    cardPacksTotalCount:null,\r\n    maxCardsCount:0,\r\n    minCardsCount:16,\r\n    page:null,\r\n    pageCount:null\r\n};\r\n","import {ResponsePacksDataType} from \"../p3-dal/PacksAPI\";\r\n\r\nexport const GET_PACKS = 'PACKS/GET_PACKS';\r\n\r\ntype GetPacksACType = ReturnType<typeof getPacks>;\r\n\r\nexport type packsReducerActions = GetPacksACType ;\r\n\r\nexport const getPacks = (packs: ResponsePacksDataType) => {\r\n    return {\r\n        type: GET_PACKS,\r\n        packs\r\n    } as const\r\n}\r\n","import {CardsInitialStateType, CardsType} from \"./cardsInitialState\";\r\n\r\nexport const GET_CARDS = 'CARDS/GET_CARDS';\r\n\r\ntype GetCardsACType = ReturnType<typeof getCards>;\r\n\r\nexport type cardsReducerActions = GetCardsACType ;\r\n\r\nexport const getCards = (cards: CardsInitialStateType) => {\r\n    return {\r\n        type: GET_CARDS,\r\n        cards\r\n    } as const\r\n}","export type CardsType = {\r\n    answer: string\r\n    qwestion: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n\r\n\r\n}\r\nexport type CardsInitialStateType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade:number\r\n    minGrade:number\r\n    page:number\r\n    pageCount:number\r\n\r\n\r\n}\r\n\r\nexport const cardsInitialState: CardsInitialStateType = {\r\n    cards: [],\r\n    cardsTotalCount: 3,\r\n    maxGrade:5,\r\n    minGrade: 2,\r\n    page:1,\r\n    pageCount:4\r\n};","export type PaginationInitialStateType = {\r\n    currentPage: number;\r\n    pageSize: number\r\n}\r\nexport const paginationInitialState: PaginationInitialStateType = {\r\n    currentPage: 1,\r\n    pageSize: 10\r\n};\r\n","export type searchPanelInitialStateType = {\r\n    searchValue: string;\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    maxGrade:number;\r\n    minGrade: number;\r\n}\r\nexport const searchPanelInitialState: searchPanelInitialStateType = {\r\n    searchValue: '',\r\n    minCardsCount: 0,\r\n    maxCardsCount: 16,\r\n    maxGrade:4.987525071790364,\r\n    minGrade: 2.0100984354076568\r\n};\r\n","export const SORT = 'SORT/SORT';\r\n\r\ntype SortACType = ReturnType<typeof sortByField>;\r\n\r\nexport type SortReducerActions = SortACType;\r\nexport const sortByField = (sort: string) => {\r\n    return {\r\n        type: SORT,\r\n        sort\r\n    } as const\r\n}\r\n","export type SortInitialStateType = {\r\n    sort: null | string;\r\n}\r\nexport const sortInitialState: SortInitialStateType = {\r\n    sort: null\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"../../n2-features/f1-auth/a1-login/l2-bll/loginReducer\";\r\nimport {registerReducer} from \"../../n2-features/f1-auth/a2-register/p2-bll/registerReducer\";\r\nimport {mainReducer} from \"./b1-main/mainReducer\";\r\nimport {profileReducer} from \"../../n2-features/f1-auth/a5-profile/p2-bll/profileReducer\";\r\nimport {restoreReducer} from \"../../n2-features/f1-auth/a3-restore/r2-bll/restoreReducer\";\r\nimport {setPassReducer} from \"../../n2-features/f1-auth/a4-setPass/s2-bll/setPassReducer\";\r\nimport {packsReducer} from \"../../n2-features/f2-packs_cards/p1-packs/p2-bll/packsReducer\";\r\nimport {cardsReducer} from \"../../n2-features/f2-packs_cards/p2-cards/c2-bll/cardsReducer\";\r\nimport {paginationReducer} from \"../../n0-common/c1-ui/pagination/p2_bll/paginationReducer\";\r\nimport {searchPanelReducer} from \"../../n2-features/f2-packs_cards/p3-search-panel/s2-bll/searchPanelReducer\";\r\nimport { sortReducer } from \"../../n0-common/c1-ui/sort/s2-bll/SortReducer\";\r\n\r\n\r\nconst RootReducer = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    main: mainReducer,\r\n    restore: restoreReducer,\r\n    setPass: setPassReducer,\r\n    profile: profileReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    pagination: paginationReducer,\r\n    search: searchPanelReducer,\r\n    sort:sortReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof RootReducer>;\r\n\r\nexport const store = createStore(RootReducer, applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {LOGIN_IN, loginReducerActions, SET_LOGIN_ERROR} from \"./loginActions\";\r\nimport {loginInitialState, LoginInitialStateType} from \"./loginInitialState\";\r\n\r\nexport const loginReducer = (state:LoginInitialStateType = loginInitialState, action: loginReducerActions) => {\r\n    switch (action.type) {\r\n        case LOGIN_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isLoginIn: action.value\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {registerInitialState} from \"./registerInitialState\";\r\nimport {REGISTER_IN, registerReducerActions} from \"./registerActions\";\r\n\r\n\r\n\r\nexport const registerReducer = (state = registerInitialState, action: registerReducerActions) => {\r\n    switch (action.type) {\r\n        case REGISTER_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isRegisterIn:true\r\n\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","\r\n\r\nexport const REGISTER_IN = 'REGISTER/REGISTER_IN'; // blank\r\n\r\ntype registerACType = ReturnType<typeof registerIn>;\r\n\r\nexport type registerReducerActions = registerACType;\r\n\r\nexport const registerIn = () => {\r\n    return {\r\n        type:REGISTER_IN,\r\n\r\n    } as const\r\n}","import {mainInitialState, MainInitialStateType} from \"./mainInitialState\";\r\nimport {mainReducerActions, SET_ERROR, SET_STATUS} from \"./mainActions\";\r\n\r\nexport const mainReducer = (state: MainInitialStateType = mainInitialState, action: mainReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {RestoreReducerActions} from \"./restoreActions\";\r\nimport {restoreInitialState, RestoreInitialStateType} from \"./restoreInitialState\";\r\n\r\nexport const restoreReducer = (state: RestoreInitialStateType = restoreInitialState, action: RestoreReducerActions):RestoreInitialStateType => {\r\n    switch (4) {\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {SET_PASS_IN, setPassReducerActions} from \"./setPassActions\";\r\nimport {setPassInitialState, SetPassInitialStateType} from \"./setPassInitialState\";\r\n\r\nexport const setPassReducer = (state: SetPassInitialStateType = setPassInitialState, action: setPassReducerActions): SetPassInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PASS_IN: { // blank\r\n            return {\r\n                ...state,\r\n                isSetPassIn: true\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","\r\n\r\nexport const SET_PASS_IN = 'SET_PASS/SET_PASS_IN'; // blank\r\n\r\ntype setPassACType = ReturnType<typeof setPassIn>;\r\n\r\nexport type setPassReducerActions = setPassACType;\r\n\r\nexport const setPassIn = () => {\r\n    return {\r\n        type: SET_PASS_IN,\r\n    } as const\r\n}\r\n\r\n","import {profileReducerActions, SET_USER} from \"./profileActions\";\r\nimport {profileInitialState, ProfileInitialStateType} from \"./profileInitialState\";\r\n\r\nexport const profileReducer = (state: ProfileInitialStateType = profileInitialState, action: profileReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_USER: { // blank\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {packsInitialState, PacksInitialStateType} from \"./packsInitialState\";\r\nimport {GET_PACKS, packsReducerActions} from \"./packsActions\";\r\n\r\nexport const packsReducer = (state:PacksInitialStateType = packsInitialState, action: packsReducerActions):PacksInitialStateType => {\r\n    switch (action.type) {\r\n        case GET_PACKS:\r\n            return {\r\n                ...state,\r\n               ...action.packs\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {cardsReducerActions, GET_CARDS} from \"./cardsActions\";\r\nimport {cardsInitialState, CardsInitialStateType} from \"./cardsInitialState\";\r\n\r\nexport const cardsReducer = (state: CardsInitialStateType = cardsInitialState, action: cardsReducerActions): CardsInitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS:\r\n            return {\r\n                ...state,\r\n                ...action.cards\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {paginationInitialState, PaginationInitialStateType} from \"./paginationInitialState\";\r\nimport {PaginationReducerActions} from \"./paginationActions\";\r\n\r\nexport const paginationReducer = (state: PaginationInitialStateType = paginationInitialState, action: PaginationReducerActions): PaginationInitialStateType => {\r\n    switch (action.type) {\r\n        case \"PAGINATION/SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"PAGINATION/SET_PAGE_SIZE\":\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import {searchPanelInitialState, searchPanelInitialStateType} from \"./searchPanelInitialState\";\r\nimport {searchPanelReducerActions, SET_MIN_CARDS_COUNT, SET_SEARCH_INPUT_VALUE} from \"./searchPanelActions\";\r\n\r\nexport const searchPanelReducer = (state: searchPanelInitialStateType = searchPanelInitialState, action: searchPanelReducerActions): searchPanelInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_SEARCH_INPUT_VALUE:\r\n            return {\r\n                ...state,\r\n                searchValue: action.searchValue\r\n            }\r\n        case SET_MIN_CARDS_COUNT:\r\n            return {\r\n                ...state,\r\n                minCardsCount: action.minCardsCount\r\n            }\r\n        case \"SEARCH_PANEL/SET_MAX_CARDS_COUNT\":\r\n            return {\r\n                ...state,\r\n                maxCardsCount: action.maxCardsCount\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","export const SET_SEARCH_INPUT_VALUE = 'SEARCH_PANEL/SET_SEARCH_INPUT_VALUE';\r\nexport const SET_MIN_CARDS_COUNT = 'SEARCH_PANEL/SET_MIN_CARDS_COUNT';\r\nexport const SET_MAX_CARDS_COUNT = 'SEARCH_PANEL/SET_MAX_CARDS_COUNT';\r\n\r\ntype SetSearchInputValueACType = ReturnType<typeof setSearchInputValue>;\r\ntype SetMinCardsCountACType = ReturnType<typeof setMinCardsCount>;\r\ntype SetMaxCardsCountACType = ReturnType<typeof setMaxCardsCount>;\r\n\r\nexport type searchPanelReducerActions = SetSearchInputValueACType | SetMinCardsCountACType | SetMaxCardsCountACType  ;\r\n\r\nexport const setSearchInputValue = (searchValue: string) => {\r\n    return {\r\n        type: SET_SEARCH_INPUT_VALUE,\r\n        searchValue\r\n    } as const\r\n}\r\nexport const setMinCardsCount = (minCardsCount: number) => {\r\n    return {\r\n        type: SET_MIN_CARDS_COUNT,\r\n        minCardsCount\r\n    } as const\r\n}\r\nexport const setMaxCardsCount = (maxCardsCount: number) => {\r\n    return {\r\n        type: SET_MAX_CARDS_COUNT,\r\n        maxCardsCount\r\n    } as const\r\n}\r\n","import {SORT, SortReducerActions} from \"./SortActions\";\r\nimport {sortInitialState, SortInitialStateType} from \"./SortInitialState\";\r\n\r\nexport const sortReducer = (state: SortInitialStateType = sortInitialState, action: SortReducerActions): SortInitialStateType => {\r\n    switch (action.type) {\r\n        case SORT:\r\n            return {\r\n                ...state,\r\n                sort: action.sort\r\n            }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};","import  axios from 'axios';\r\n\r\n export const axiosInstance = axios.create({\r\n    baseURL:\r\n       // \"http://localhost:7542/2.0/\" //local\r\n     'https://neko-back.herokuapp.com/2.0'\r\n     ,\r\n     withCredentials:true\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RegisterDataType={\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport type ResponseRegisterDataType={\r\n    error:string\r\n}\r\n\r\n\r\nexport const RegisterAPI ={\r\n    register(data:RegisterDataType){\r\n        return axiosInstance.post<ResponseRegisterDataType>('auth/register',data)\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\n\r\ntype StatusBlockPropsType = {\r\n    title: string;\r\n    status: RequestStatusType;\r\n    error: null | string;\r\n}\r\n\r\nexport const Status: React.FC<StatusBlockPropsType> = React.memo((props) => {\r\n    const {title, status, error} = props;\r\n    return (\r\n        <div>\r\n            <h2>{title}</h2>\r\n            {status === 'failed' ? <div style={{color:'red'}}>{error}</div> :\r\n                status === 'succeeded' ? <div style={{color:'green'}}>success</div> : null}\r\n        </div>\r\n    );\r\n});","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {registerTC} from \"../p2-bll/registerThunk\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype RegisterPropsType={}\r\n\r\nexport const Register: React.FC<RegisterPropsType>= React.memo((props) => {\r\n\r\n    const isRegisterIn = useSelector<AppRootStateType, boolean>(state => state.register.isRegisterIn)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState<string>('gerasimenkodenis7@gmail.com');\r\n    const [password, setPassword] = useState<string>('qwertyu12');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited,setFirstVisited]);\r\n\r\n    const onRegister=()=>{\r\n        dispatch(registerTC({email,password}))\r\n    }\r\n\r\n    if (isRegisterIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n            }\r\n            return (\r\n            <div style={{\r\n                width: '40%',\r\n                outline: '1px solid red',\r\n                margin: '0 auto',\r\n                display: 'flex',\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: 'center'\r\n            }}>\r\n                <Status title={'Register'} status={status} error={error}/>\r\n\r\n                <div>\r\n                    <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                           onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" placeholder={'enter you password'} value={password}\r\n                           onChange={(e) => setPassword(e.currentTarget.value)}/>\r\n                </div>\r\n                <button onClick={onRegister}>sign up</button>\r\n            </div>\r\n            );\r\n            });\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RegisterAPI, RegisterDataType} from \"../p3-dal/RegisterAPI\";\r\nimport {registerIn} from \"./registerActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\n\r\nexport const registerTC = (data: RegisterDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await RegisterAPI.register(data);\r\n            dispatch(registerIn());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\n\r\ntype LoginPropsType = {\r\n    email: string;\r\n    setEmail: (value: string) => void;\r\n    password: string;\r\n    setPassword: (value: string) => void;\r\n    checked: boolean;\r\n    setChecked: (value: boolean) => void;\r\n    onLogin:() => void;\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = React.memo((props) => {\r\n\r\n    const {email, password, checked, setEmail, setPassword, setChecked, onLogin} = props;\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                       onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={password}\r\n                       onChange={(e) => setPassword(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Remember Me\r\n                    <input type=\"checkbox\" name=\"check\" checked={checked}\r\n                           onChange={(e) => setChecked(e.currentTarget.checked)}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <NavLink to={PATH.RESTORE}>Востановить пароль?</NavLink>\r\n            </div>\r\n            <button onClick={onLogin}>Sign in</button>\r\n            <div>\r\n                <NavLink to={PATH.REGISTER}>Регистрация</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type LoginDataType = {\r\n    email:string;\r\n    password:string;\r\n    rememberMe:boolean\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport type RespLogOutType = {\r\n    info:string;\r\n    error?:string;\r\n}\r\n\r\nexport const LoginAPI ={\r\n    login(data:LoginDataType){\r\n        return axiosInstance.post<ResponseDataType>('auth/login', data);\r\n    },\r\n    logOut(){\r\n        return axiosInstance.delete<RespLogOutType>('auth/me');\r\n    },\r\n    authMe(){\r\n        return axiosInstance.post<ResponseDataType>('auth/me');\r\n    },\r\n\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Login} from \"./Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../l2-bll/loginThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\nexport const LoginContainer: React.FC<LoginContainerPropsType> = React.memo(() => {\r\n\r\n\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState<string>('grok88@tut.by');\r\n    const [password, setPassword] = useState<string>('alexgor88');\r\n    const [remember, setRemember] = useState<boolean>(false);\r\n    const [flag, setFlag] = useState<boolean>(false);\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        } else {\r\n            setRedirect(true);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onLogin = useCallback(() => {\r\n        dispatch(loginTC({email, password, rememberMe: remember}));\r\n    }, [email, password, remember]);\r\n\r\n\r\n    if (isLoginIn && redirect && (status === 'succeeded')) {\r\n        setTimeout(() => {\r\n            setFlag(true);\r\n        }, 2000);\r\n    }\r\n\r\n    if (flag) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Login'} status={status} error={error}/>\r\n            <Login email={email} setEmail={setEmail} password={password} setPassword={setPassword} checked={remember}\r\n                   setChecked={setRemember} onLogin={onLogin}/>\r\n        </div>\r\n    );\r\n});","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {LoginAPI, LoginDataType} from \"../l3-dal/LoginAPI\";\r\nimport {loginIn} from \"./loginActions\";\r\nimport {setUser} from \"../../a5-profile/p2-bll/profileActions\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const loginTC = (data: LoginDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.login(data);\r\n            dispatch(setUser(res.data));\r\n            dispatch(loginIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const logOutTC = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.logOut()\r\n            dispatch(loginIn(false));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const authMeTC = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const res = await LoginAPI.authMe()\r\n            dispatch(setUser(res.data));\r\n            dispatch(loginIn(true));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport anonym from './anonim.jpg'\r\n\r\ntype ProfilePropsType = {\r\n    user: ResponseDataType | null;\r\n    isLoginIn: boolean;\r\n    logOut :() => void;\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo((props) => {\r\n    return <div>\r\n        {\r\n            props.isLoginIn ? <div>\r\n                <div>\r\n                    <img src={props.user?.avatar ? props.user?.avatar : anonym} alt=\"user-avatar\"\r\n                         style={{width: '300px', height: 'auto'}}/>\r\n                </div>\r\n                <div>\r\n                    <p>name:{props.user?.name}</p>\r\n                    <p>email:{props.user?.email}</p>\r\n                </div>\r\n                <button onClick={props.logOut}>LogOut</button>\r\n            </div> : <div> You are not authorized </div>\r\n        }\r\n    </div>\r\n});","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {ResponseDataType} from \"../../a1-login/l3-dal/LoginAPI\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {authMeTC, logOutTC} from \"../../a1-login/l2-bll/loginThunk\";\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nexport const ProfileContainer: React.FC<ProfileContainerPropsType> = React.memo(() => {\r\n\r\n        const user = useSelector<AppRootStateType, ResponseDataType | null>(state => state.profile.user);\r\n        const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoginIn);\r\n        const [flag, setFlag] = useState<boolean>(false);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n            if (!isLoginIn) {\r\n                handleAuth()\r\n            }\r\n        }, []);\r\n\r\n        const handleAuth = async () => {\r\n            await dispatch(authMeTC());\r\n            setTimeout(() => {\r\n                setFlag(true)\r\n            }, 2000)\r\n        }\r\n\r\n        const logOut = useCallback(() => {\r\n            dispatch(logOutTC());\r\n        }, []);\r\n\r\n\r\n\r\n        if (!isLoginIn && flag) {\r\n            return <Redirect to={PATH.LOGIN}/>\r\n        }\r\n\r\n        return (\r\n            <Profile user={user} isLoginIn={isLoginIn} logOut={logOut}/>\r\n        );\r\n    }\r\n);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\n\r\ntype RestorePropsType = {\r\n    email: string;\r\n    setEmail: (value: string) => void;\r\n    onRestore: () => void;\r\n    status: RequestStatusType\r\n}\r\n\r\nexport const Restore: React.FC<RestorePropsType> = React.memo((props) => {\r\n    const {email, setEmail, onRestore, status} = props;\r\n    return (\r\n        <div>\r\n            {status === 'succeeded' ? <div>\r\n                На почту пришло письмо...\r\n            </div> : ''}\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you email'} value={email}\r\n                       onChange={(e) => setEmail(e.currentTarget.value)}/>\r\n            </div>\r\n            <button onClick={onRestore}>Востановить пароль</button>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type RestoreDataType = {\r\n    email: string;\r\n    from?: string;\r\n    message?: string;\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const RestoreAPI = {\r\n    restorePass(data: RestoreDataType) {\r\n        return axiosInstance.post('auth/forgot', data);\r\n    }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Restore} from \"./Restore\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RestorePassTC} from \"../r2-bll/restoreThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype RestoreContainerPropsType = {}\r\n\r\nexport const RestoreContainer: React.FC<RestoreContainerPropsType> = React.memo((props) => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState<string>('grok88@tut.by');\r\n\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited, setFirstVisited]);\r\n\r\n    const onRestore = useCallback(() => {\r\n        //thunk\r\n        const from = \"test-front-admin <ai73a@yandex.by>\";\r\n        const message = `<div style=\"background-color: lime; padding: 15px\">\t\t\r\n\t<a href='http://localhost:3000/cards_project#/set-new-password/$token$'>\t\r\n\tlink</a></div>`\r\n\r\n        dispatch(RestorePassTC({email, from, message}));\r\n    }, [email]);\r\n\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'Restore'} status={status} error={error}/>\r\n            <Restore email={email} setEmail={setEmail} onRestore={onRestore} status={status}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {RestoreAPI, RestoreDataType} from \"../r3-dal/RestoreAPI\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\n\r\nexport const RestorePassTC = (data: RestoreDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus('loading'));\r\n        try {\r\n            const resp = await RestoreAPI.restorePass(data);\r\n            dispatch(setStatus('succeeded'));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\n\r\nexport type SetPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    error: string\r\n}\r\n\r\nexport const SetPassAPI = {\r\n    setPass(data: SetPassDataType) {\r\n        return axiosInstance.post('auth/set-new-password', data);\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport {registerTC} from \"../../a2-register/p2-bll/registerThunk\";\r\nimport {setPassTC} from \"../s2-bll/setPassThunk\";\r\nimport {PATH} from \"../../../../n1-main/m1-ui/main/routes/Routes\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport {Status} from \"../../../../n0-common/c1-ui/status/Status\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\ntype SetPassPropsType = {}\r\n\r\nexport const SetPass: React.FC<SetPassPropsType> = React.memo((props) => {\r\n    const isSetPassIn = useSelector<AppRootStateType, boolean>(state => state.setPass.isSetPassIn);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const [password, setPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n    const [firstVisited, setFirstVisited] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (firstVisited) {\r\n            dispatch(setError(''));\r\n            dispatch(setStatus('idle'));\r\n            setFirstVisited(false);\r\n        }\r\n    }, [firstVisited,setFirstVisited]);\r\n\r\n    const {token} = useParams();\r\n\r\n    const onSetPass = () => {\r\n        if (password !== passwordConfirm) {\r\n            dispatch(setStatus('failed'));\r\n            dispatch(setError('passwords are not equal'));\r\n        } else {\r\n            dispatch(setPassTC({password, resetPasswordToken: token}))\r\n        }\r\n\r\n    }\r\n    if (isSetPassIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div style={{\r\n            width: '40%',\r\n            outline: '1px solid red',\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: 'center'\r\n        }}>\r\n            <Status title={'SetPassword'} status={status} error={error}/>\r\n\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={password}\r\n                       onChange={(e) => setPassword(e.currentTarget.value)}/></div>\r\n            <div>\r\n                <input type=\"text\" placeholder={'enter you password'} value={passwordConfirm}\r\n                       onChange={(e) => setPasswordConfirm(e.currentTarget.value)}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n            <button onClick={onSetPass}>set pass</button>\r\n        </div>\r\n    );\r\n})","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\n\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\n\r\nimport {SetPassAPI, SetPassDataType} from \"../s3-dal/SetPassAPI\";\r\nimport {setPassIn} from \"./setPassActions\";\r\n\r\n\r\nexport const setPassTC = (data: SetPassDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            await SetPassAPI.setPass(data);\r\n            dispatch(setPassIn());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n\r\n    }\r\n}","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\nimport {PacksType} from \"../p2-bll/packsInitialState\";\r\n\r\nexport type AddPackDataType = {\r\n    cardsPack: {\r\n        name: string\r\n    }\r\n}\r\nexport type UpdatePackDataType = {\r\n    cardsPack: {\r\n        _id: string\r\n        name?: string\r\n    }\r\n}\r\nexport type ResponsePacksDataType = {\r\n    packs: Array<PacksType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number// количество элементов на странице\r\n}\r\nexport const PacksAPI = {\r\n    getPacks(pageCount: number, page: number | null, min: number, max: number, name: string, sort: string | null) {\r\n        return axiosInstance.get<ResponsePacksDataType>(`/cards/pack?pageCount=${pageCount}&page=${page}&min=${min}&max=${max}&packName=${name}&sortPacks=${sort}`);\r\n    },\r\n    deletePack(packId: string) {\r\n        return axiosInstance.delete(`/cards/pack?id=${packId}`);\r\n    },\r\n    addPack(data: AddPackDataType) {\r\n        return axiosInstance.post(`/cards/pack`, data);\r\n    },\r\n    updatePack(data: UpdatePackDataType) {\r\n        return axiosInstance.put(`/cards/pack`, data);\r\n    }\r\n}\r\n\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {AddPackDataType, PacksAPI, UpdatePackDataType} from \"../p3-dal/PacksAPI\";\r\nimport {getPacks} from \"./packsActions\";\r\n\r\n\r\nexport const packTC = (pageCount: number = 10, page: number|null = 1, min:number=0, max:number =16, name:string = '',sort:string| null=''): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n            const data = await PacksAPI.getPacks(pageCount, page,min,max,name,sort);\r\n            dispatch(getPacks(data.data));\r\n            dispatch(setStatus(\"succeeded\"));\r\n            console.log(sort)\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const deletePackTC = (packId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.deletePack(packId);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const addPackTC = (data: AddPackDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.addPack(data);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const updatePackTC = (data: UpdatePackDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await PacksAPI.updatePack(data);\r\n            dispatch(packTC());\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\n","export const SET_CURRENT_PAGE = 'PAGINATION/SET_CURRENT_PAGE';\r\nexport const SET_PAGE_SIZE = 'PAGINATION/SET_PAGE_SIZE';\r\n\r\ntype SetCurrentPageACType = ReturnType<typeof setCurrentPage>;\r\ntype SetPageSizeACType = ReturnType<typeof setPageSize>;\r\n\r\nexport type PaginationReducerActions = SetCurrentPageACType | SetPageSizeACType ;\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\nexport const setPageSize = (pageSize: number) => {\r\n    return {\r\n        type: SET_PAGE_SIZE,\r\n        pageSize\r\n    } as const\r\n}\r\n","import React, {useState} from \"react\";\r\nimport Slider from \"antd/lib/slider\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setMaxCardsCount, setMinCardsCount, setSearchInputValue} from \"../s2-bll/searchPanelActions\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {searchPanelInitialStateType} from \"../s2-bll/searchPanelInitialState\";\r\nimport {packTC} from \"../../p1-packs/p2-bll/packsThunk\";\r\n\r\n\r\ntype SearchPanelType = {\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    currentPage: number;\r\n    pageSize: number;\r\n}\r\n\r\nexport const SearchPanel: React.FC<SearchPanelType> = React.memo((props) => {\r\n    const {searchValue, maxCardsCount, minCardsCount} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState('');\r\n\r\n    function onChange([val1, val2]: Array<number>) {\r\n        dispatch(setMinCardsCount(val1));\r\n    }\r\n\r\n    function onAfterChange([val1, val2]: Array<number>) {\r\n        dispatch(setMaxCardsCount(val2));\r\n    }\r\n\r\n\r\n    const onSearch = () => {\r\n        dispatch(setSearchInputValue(value));\r\n        dispatch(packTC(props.pageSize, props.currentPage, minCardsCount, maxCardsCount, value));\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'space-evenly', height: '200px', alignItems: \"center\"}}>\r\n            <div>\r\n                <label>\r\n                    Search\r\n                    <input type=\"text\" value={value} onChange={e => setValue(e.currentTarget.value)}/>\r\n                </label>\r\n            </div>\r\n            <div style={{width: \"500px\"}}>\r\n                <Slider range tooltipVisible={true} step={1} defaultValue={[props.minCardsCount, props.maxCardsCount]}\r\n                        onChange={onChange}\r\n                        onAfterChange={onAfterChange}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={onSearch}>Search</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});","import React from \"react\";\r\nimport {CaretDownOutlined, CaretUpOutlined} from \"@ant-design/icons\";\r\n\r\n\r\ntype SortPropsType = {\r\n    onSortUp:() => void;\r\n    onSortDown:() => void;\r\n}\r\n\r\nexport const Sort: React.FC<SortPropsType> = React.memo((props) => {\r\n\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: 'column'}}>\r\n            <CaretUpOutlined onClick={props.onSortUp}/>\r\n            <CaretDownOutlined onClick={props.onSortDown}/>\r\n        </div>\r\n    );\r\n});","import React, {useEffect} from \"react\";\r\nimport {Pagination, Space, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPackTC, deletePackTC, packTC, updatePackTC} from \"../p2-bll/packsThunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {PacksInitialStateType, PacksType} from \"../p2-bll/packsInitialState\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport Button from \"antd/lib/button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {setCurrentPage, setPageSize} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationActions\";\r\nimport {PaginationInitialStateType} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationInitialState\";\r\nimport {SearchPanel} from \"../../p3-search-panel/s1-ui/SearchPanel\";\r\nimport {searchPanelInitialStateType} from \"../../p3-search-panel/s2-bll/searchPanelInitialState\";\r\nimport {Sort} from \"../../../../n0-common/c1-ui/sort/s1-ui/Sort\";\r\nimport {SortInitialStateType} from \"../../../../n0-common/c1-ui/sort/s2-bll/SortInitialState\";\r\nimport {sortByField} from \"../../../../n0-common/c1-ui/sort/s2-bll/SortActions\";\r\n\r\ntype PacksPropsType = {}\r\n\r\nexport const Packs: React.FC<PacksPropsType> = React.memo((props) => {\r\n\r\n    const {cardPacks, cardPacksTotalCount, page, pageCount} = useSelector<AppRootStateType, PacksInitialStateType>(state => state.packs);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const {currentPage, pageSize} = useSelector<AppRootStateType, PaginationInitialStateType>(state => state.pagination);\r\n    const {searchValue, minCardsCount, maxCardsCount} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n    const {sort} = useSelector<AppRootStateType, SortInitialStateType>(state => state.sort);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(packTC());\r\n    }, []);\r\n\r\n    //cards block\r\n    const onDeletePack = (packId: string) => {\r\n        dispatch(deletePackTC(packId));\r\n    }\r\n    const onAddPack = () => {\r\n        const name = 'New Grok Pack'\r\n        dispatch(addPackTC({\r\n            cardsPack: {\r\n                name\r\n            }\r\n        }));\r\n    }\r\n    const onUpdatePack = (packId: string) => {\r\n        const name = 'New Grok Update Pack';\r\n        dispatch(updatePackTC({\r\n            cardsPack: {\r\n                name,\r\n                _id: packId\r\n            }\r\n        }));\r\n    }\r\n    // sort block\r\n    const onSortUp = () => {\r\n        dispatch(sortByField('0updated'));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, '0updated'));\r\n    }\r\n    const onSortDown = () => {\r\n        dispatch(sortByField('1updated'));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, '1updated'));\r\n    }\r\n    //table block\r\n    const columns = [\r\n        {\r\n            title: 'name',\r\n            dataIndex: 'name',\r\n            // key: '_id',\r\n\r\n            // render: (pack: PacksType) => {\r\n            //     return <div style={{color: \"red\"}}>{pack.type}{ pack.name}</div>\r\n            // }\r\n        },\r\n        {\r\n            title: 'cardsCount',\r\n            dataIndex: 'cardsCount',\r\n        },\r\n        {\r\n            title: <div style={{display: \"flex\", alignItems: 'center'}}>\r\n                <Space>\r\n                    <span>updated</span>\r\n                    <Sort onSortUp={onSortUp} onSortDown={onSortDown}/>\r\n                </Space>\r\n            </div>,\r\n            dataIndex: 'updated',\r\n        },\r\n        {\r\n            title: 'url',\r\n            dataIndex: 'url',\r\n        },\r\n        {\r\n            title: <button onClick={onAddPack}>ADD</button>,\r\n            // dataIndex: 'actions',\r\n            render: (pack: PacksType) => {\r\n                return <div>\r\n                    <Space>\r\n                        <Button onClick={() => onUpdatePack(pack._id)}>\r\n                            update\r\n                        </Button>\r\n                        <button onClick={() => onDeletePack(pack._id)}>\r\n                            DEL\r\n                        </button>\r\n                        <NavLink to={`/cards/${pack._id}`}>cards</NavLink>\r\n                    </Space>\r\n                </div>\r\n            }\r\n        },\r\n    ];\r\n\r\n    //pagination\r\n    const onChangePage = (page: number, pageSize: number | undefined) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(packTC(pageSize, page, minCardsCount, maxCardsCount, searchValue, sort));\r\n    }\r\n    const onShowSizeChange = (current: number, pageSize: number) => {\r\n        dispatch(setPageSize(pageSize));\r\n        dispatch(packTC(pageSize, current, minCardsCount, maxCardsCount, searchValue, sort));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<Status title={'Packs'} status={status} error={error}/>*/}\r\n            <SearchPanel minCardsCount={minCardsCount} maxCardsCount={maxCardsCount} pageSize={pageSize}\r\n                         currentPage={currentPage}/>\r\n            <Table<PacksType> dataSource={cardPacks} columns={columns}\r\n                              pagination={false}\r\n                              rowKey={'_id'}\r\n\r\n            />\r\n\r\n            <Pagination current={page as number}\r\n                        defaultCurrent={1}\r\n                        onChange={onChangePage}\r\n                        pageSize={pageCount as number}\r\n                        defaultPageSize={10}\r\n                        total={cardPacksTotalCount as number}\r\n                        onShowSizeChange={onShowSizeChange}/>\r\n        </>\r\n    );\r\n});","import preloader from \"../preloader/svg-loaders/three-dots.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n       <div style={{ textAlign:'center'}}>\r\n           <img src={preloader} alt=\"preloader\"/>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;","import {axiosInstance} from \"../../../../n1-main/m3-dal/instance\";\r\nimport {CardsType} from \"../c2-bll/cardsInitialState\";\r\n\r\nexport type AddCardDataType = {\r\n    card: {\r\n        cardsPack_id: string\r\n    }\r\n}\r\nexport type UpdateCardDataType = {\r\n    card: {\r\n        _id: string\r\n    }\r\n}\r\n\r\nexport type ResponseCardsDataType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n//cardsPackId: string, min: number, max: number, page: number, pageCount: number,answer:string\r\n//return axiosInstance.get<ResponseCardsDataType>(`/cards/card?cardsPack_id=${cardsPackId}&min=${min}&max=${max}&page=${page}&pageCount=${pageCount}&cardAnswer=${answer}`);\r\n\r\nexport const CardsAPI = {\r\n    getCards(cardsPackId: string, max: number,page: number, pageCount: number,answer:string) {\r\n        return axiosInstance.get<ResponseCardsDataType>(`/cards/card?cardsPack_id=${cardsPackId}&max=${max}&page=${page}&pageCount=${pageCount}&cardAnswer=${answer}`);\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return axiosInstance.delete(`/cards/card?id=${cardId}`);\r\n    },\r\n    addCard(data: AddCardDataType) {\r\n        return axiosInstance.post(`/cards/card`, data);\r\n    },\r\n    updateCard(data: UpdateCardDataType) {\r\n        return axiosInstance.put(`/cards/card`, data);\r\n    }\r\n}","import {SWActionType, ThunkType} from \"../../../../n1-main/m2-bll/thunks\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {setError, setStatus} from \"../../../../n1-main/m2-bll/b1-main/mainActions\";\r\nimport {AddCardDataType, CardsAPI, UpdateCardDataType} from \"../c3-dall/CardsAPI\";\r\nimport {getCards} from \"./cardsActions\";\r\n\r\nexport const getCardTC = (cardsPackId: string, min: number = 2, max: number = 5, page: number = 1, pageCount: number = 4, answer: string = ''): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        try {\r\n\r\n            const data = await CardsAPI.getCards(cardsPackId, max, page, pageCount, answer);\r\n\r\n            dispatch(getCards(data.data));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const deleteCardTC = (cardId: string, cardsPackId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            const data = await CardsAPI.deleteCard(cardId);\r\n            dispatch(getCardTC(cardsPackId));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const addCardTC = (data: AddCardDataType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await CardsAPI.addCard(data);\r\n            dispatch(getCardTC(data.card.cardsPack_id));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}\r\nexport const updateCardTC = (data: UpdateCardDataType, cardsPackId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootStateType, unknown, SWActionType>) => {\r\n        dispatch(setStatus(\"loading\"));\r\n        // Запросы на API\r\n        try {\r\n            await CardsAPI.updateCard(data);\r\n            dispatch(getCardTC(cardsPackId));\r\n            dispatch(setStatus(\"succeeded\"));\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setError(error));\r\n            dispatch(setStatus(\"failed\"));\r\n        }\r\n    }\r\n}","import React, {useEffect} from \"react\";\r\nimport {Pagination, Table} from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../../n1-main/m2-bll/b1-main/mainInitialState\";\r\nimport Button from \"antd/lib/button\";\r\nimport {CardsInitialStateType, CardsType} from \"../c2-bll/cardsInitialState\";\r\nimport {addCardTC, getCardTC, deleteCardTC, updateCardTC} from \"../c2-bll/cardsThunk\";\r\nimport {useParams, NavLink} from \"react-router-dom\";\r\nimport {PaginationInitialStateType} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationInitialState\";\r\nimport {searchPanelInitialStateType} from \"../../p3-search-panel/s2-bll/searchPanelInitialState\";\r\nimport {setCurrentPage, setPageSize} from \"../../../../n0-common/c1-ui/pagination/p2_bll/paginationActions\";\r\n\r\n\r\ntype CardsPropsType = {}\r\n\r\nexport const Cards: React.FC<CardsPropsType> = React.memo((props) => {\r\n\r\n    const {cards,cardsTotalCount, page, pageCount} = useSelector<AppRootStateType, CardsInitialStateType>(state => state.cards);\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.main.error);\r\n    const {currentPage, pageSize} = useSelector<AppRootStateType, PaginationInitialStateType>(state => state.pagination);\r\n    const {searchValue, minGrade, maxGrade} = useSelector<AppRootStateType, searchPanelInitialStateType>(state => state.search);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardTC(id));\r\n    }, []);\r\n\r\n    const {id} = useParams();\r\n\r\n\r\n    const onDeleteCard = (cardId: string,cardsPackId:string) => {\r\n        dispatch(deleteCardTC(cardId, cardsPackId));\r\n    }\r\n    const onAddCard = () => {\r\n        dispatch(addCardTC({\r\n            card: {\r\n                cardsPack_id: id\r\n            }\r\n        }));\r\n    }\r\n    const onUpdateCard = (cardId: string) => {\r\n        dispatch(updateCardTC({card:{_id:cardId}},id))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Question',\r\n            dataIndex: 'question',\r\n        },\r\n        {\r\n            title: 'answer',\r\n            dataIndex: 'answer',\r\n        },\r\n        {\r\n            title: 'Grade',\r\n            dataIndex: 'grade',\r\n        },\r\n        {\r\n            title: 'updated',\r\n            dataIndex: 'updated',\r\n        },\r\n        {\r\n            title: 'url',\r\n            dataIndex: 'url',\r\n        },\r\n\r\n        {\r\n            title: <button onClick={(e)=> onAddCard()}>ADD</button>,\r\n            // dataIndex: 'actions',\r\n            render: (card: CardsType) => {\r\n                return <div>\r\n                    <Button onClick={() => onUpdateCard(card._id)}>\r\n                        update\r\n                    </Button>\r\n                    <button onClick={() => onDeleteCard(card._id, card.cardsPack_id)}>\r\n                        DEL\r\n                    </button>\r\n                </div>\r\n            }\r\n        },\r\n    ];\r\n    const onChangePage = (page: number, pageSize: number | undefined) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(getCardTC(id,minGrade,maxGrade,page,pageSize,searchValue));\r\n    }\r\n    const onShowSizeChange = (current: number, pageSize: number) => {\r\n        dispatch(setPageSize(pageSize));\r\n        dispatch(getCardTC(id,minGrade,maxGrade,current,pageSize,searchValue));\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/*<Status title={'Packs'} status={status} error={error}/>*/}\r\n\r\n\r\n\r\n            <Table<CardsType> dataSource={cards} columns={columns} pagination={false} rowKey={'_id'}/>\r\n\r\n            <Pagination current={page as number}\r\n                        defaultCurrent={1}\r\n                        onChange={onChangePage}\r\n                        pageSize={pageCount as number}\r\n                        defaultPageSize={10}\r\n                        total={cardsTotalCount as number}\r\n                        onShowSizeChange={onShowSizeChange}/>\r\n        </>\r\n    );\r\n});","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Register} from \"../../../../n2-features/f1-auth/a2-register/p1-ui/Register\";\r\nimport {LoginContainer} from \"../../../../n2-features/f1-auth/a1-login/l1-ui/LoginContainer\";\r\nimport {ProfileContainer} from \"../../../../n2-features/f1-auth/a5-profile/p1-ui/ProfileContainer\";\r\nimport {RestoreContainer} from \"../../../../n2-features/f1-auth/a3-restore/r1-ui/RestoreContainer\";\r\nimport {SetPass} from \"../../../../n2-features/f1-auth/a4-setPass/s1-ui/SetPass\";\r\nimport {Packs} from \"../../../../n2-features/f2-packs_cards/p1-packs/p1-ui/Packs\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../m2-bll/b1-main/mainInitialState\";\r\nimport Preloader from \"../../../../n0-common/c1-ui/preloader/Preloader\";\r\nimport {Cards} from \"../../../../n2-features/f2-packs_cards/p2-cards/c1-ui/Cards\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    RESTORE: '/restore',\r\n    SET_PASS: '/set-new-password/:token',\r\n    PROFILE: '/profile',\r\n    PACKS: '/packs',\r\n    CARDS: '/cards/:id?'\r\n}\r\nexport const Routes = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.main.status);\r\n    return (\r\n        <div>\r\n            {status === 'loading' && <Preloader/>}\r\n            <Route exact path={'/'} render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n            <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n            <Route path={PATH.RESTORE} render={() => <RestoreContainer/>}/>\r\n            <Route path={PATH.SET_PASS} render={() => <SetPass/>}/>\r\n            <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n            <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n            <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\n\r\nexport const DevHeader = () => {\r\n    return (\r\n        <div>\r\n            <NavLink to={PATH.LOGIN} style={{padding: '10px'}}>login </NavLink>\r\n            <NavLink to={PATH.REGISTER} style={{padding: '10px'}}>register</NavLink>\r\n            <NavLink to={PATH.RESTORE} style={{padding: '10px'}}>restore</NavLink>\r\n            <NavLink to={PATH.SET_PASS} style={{padding: '10px'}}>set new pass</NavLink>\r\n            <NavLink to={PATH.PROFILE} style={{padding: '10px'}}>profile</NavLink>\r\n            <NavLink to={PATH.PACKS} style={{padding: '10px'}}>packs</NavLink>\r\n            <NavLink to={PATH.CARDS} style={{padding: '10px'}}>cards</NavLink>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Routes} from './routes/Routes';\r\nimport {DevHeader} from \"./dev-header/DevHeader\";\r\n\r\nexport const Main = () => {\r\n    return <div>\r\n        <DevHeader/>\r\n        <Routes/>\r\n    </div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from '../m2-bll/store';\r\nimport {Main} from \"./main/Main\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <Main/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n        <App/>,\r\n    // </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}